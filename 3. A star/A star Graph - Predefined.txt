/* 
    Title: A* Algorithm 
    Language: Java
    Name: Vedant Sawant
    Roll Number: 68
    Batch: D2
*/

import java.util.*;
// Node class representing a node in the graph

class Node 
{
    int current;   // Current node identifier
    int gn;        // Cost from the start node to the current node
    int h;         // Heuristic estimate of the cost from the current node to the goal node
    Node parent;   // Reference to the parent node

    // Constructor to initialize node properties
    Node(int current, int gn, int h)
    {
        this.current = current;
        this.gn = gn;
        this.h = h;
        this.parent = null;
    }
}
// Graph class representing a graph with methods to add edges and get neighbors

class Graph 
{
    private Map<Integer, List<int[]>> graph = new HashMap<>();
    // Method to add an edge to the graph

    void addEdge(int from, int to, int weight) 
    {
        if (!graph.containsKey(from)) 
        {
            graph.put(from, new ArrayList<>());
        }
        graph.get(from).add(new int[]{to, weight});
    }
    // Method to get neighbors of a given node

    List<int[]> getNeighbors(int node) 
    {
        return graph.getOrDefault(node, Collections.emptyList());
    }
}

public class Astar 
{
    public static void main(String[] args) {
        // Initialize the graph

           Graph graph = new Graph();
        // Add edges to the graph

           graph.addEdge(1,2,4);
           graph.addEdge(1,3,2);
           graph.addEdge(2,3,5);
           graph.addEdge(2,4,10);
           graph.addEdge(3,5,3);
           graph.addEdge(5,4,4);
           graph.addEdge(4,6,11);

        Scanner scanner = new Scanner(System.in);

    // Specify start and goal nodes

        int startNode = 1;
        int goalNode = 6;
    // Find the shortest path using A* algorithm

        List<Integer> path = findShortestPath(graph, startNode, goalNode);
    // Output the result

        if (path != null) 
        {
            System.out.println("Final Path From " + startNode + " to " + goalNode + ": " + path);
        } 
        
        else 
        {
            System.out.println("No path found from " + startNode + " to " + goalNode);
        }

        scanner.close();
    }
        // A* algorithm to find the shortest path

    static List<Integer> findShortestPath(Graph graph, int startNode, int goalNode) {
        // Priority queue to store nodes based on their total cost (gn + h)

        PriorityQueue<Node> openList = new PriorityQueue<>(Comparator.comparingInt(node -> node.gn + node.h));
        // Map to store the cost to reach each node from the start node

        Map<Integer, Integer> gValues = new HashMap<>();
        // Add the start node to the open list

        openList.add(new Node(startNode, 0, heuristic(startNode, goalNode)));
        // Initialize the cost to reach the start node

        gValues.put(startNode, 0);

        while (!openList.isEmpty()) 
        {
        // Get the node with the lowest total cost from the open list

            Node currentNode = openList.poll();
        // If the goal is reached, reconstruct and return the path

            if (currentNode.current == goalNode) 
            {
                return reconstructPath(currentNode);
            }
            // Explore neighbors of the current node

            for (int[] neighborEdge : graph.getNeighbors(currentNode.current)) 
            {
                int neighborNode = neighborEdge[0];
                int edgeWeight = neighborEdge[1];
                int tentativeG = currentNode.gn + edgeWeight;
                int heuristicvalue= heuristic(neighborNode,goalNode);
                // Update the cost to reach the neighbor if a lower cost is found

                if (!gValues.containsKey(neighborNode) || tentativeG < gValues.get(neighborNode)) 
                {
                    gValues.put(neighborNode, tentativeG);
                                        // Add the neighbor to the open list with updated cost and heuristic

                    Node neighbor = new Node(neighborNode, tentativeG, heuristic(neighborNode, goalNode));
                    neighbor.parent = currentNode;
                    openList.add(neighbor);
                }
            }
        }

        return null;
    }
    // Reconstruct the path from the goal node to the start node

    static List<Integer> reconstructPath(Node goalNode) 
    {
        List<Integer> path = new ArrayList<>();
        Node current = goalNode;
        // Traverse the path from the goal to the start and add nodes to the path

        while (current != null) 
        {
            path.add(current.current);
            current = current.parent;
        }
        // Reverse the path to get it from start to goal

        Collections.reverse(path);

        return path;
    }
    // Heuristic function to estimate the cost from the current node to the goal node

    static int heuristic(int node, int goalNode) {
        return Math.abs(node - goalNode);
    }
}